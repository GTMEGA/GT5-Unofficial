package gregtech.common.fluids;

import gregtech.api.objects.GT_Fluid;
import gregtech.api.util.GT_LanguageManager;
import gregtech.common.GT_Worldgen_GT_Ore_Layer;
import lombok.val;
import org.lwjgl.input.Keyboard;

import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.ItemStack;
import net.minecraft.util.EnumChatFormatting;
import net.minecraftforge.fluids.FluidRegistry;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

public class GT_OreSlurry extends GT_Fluid {
    public static final Map<GT_Worldgen_GT_Ore_Layer, GT_OreSlurry> slurries = new HashMap<>();
    public final GT_Worldgen_GT_Ore_Layer oreLayer;

    public GT_OreSlurry(GT_Worldgen_GT_Ore_Layer oreMix) {
        super(String.format("slurry.%s", oreMix.mWorldGenName),
              "molten.autogenerated",
              blendColors(oreMix));

        this.oreLayer = oreMix;
        this.setGaseous(false);

        GT_LanguageManager.addStringLocalization(this.getUnlocalizedName(), this.getDefaultLocalization());
        FluidRegistry.registerFluid(this);
    }

    protected String getDefaultLocalization() {
        val oreMaterials = Arrays.asList(this.oreLayer.mPrimary,
                                         this.oreLayer.mSecondary,
                                         this.oreLayer.mBetween,
                                         this.oreLayer.mSporadic);

        val type = oreMaterials.stream()
                               .filter(Objects::nonNull)
                               .map(material -> material.mLocalizedName)
                               .findFirst()
                               .orElse("Placeholder");

        return String.format("%s Ore Slurry", type);
    }

    @SuppressWarnings({"rawtypes", "unchecked"})
    public void addTooltip(List aList, ItemStack aStack, EntityPlayer aPlayer) {
        if (Keyboard.isKeyDown(Keyboard.KEY_LSHIFT)) {
            val primary = this.oreLayer.mPrimary;
            val secondary = this.oreLayer.mSecondary;
            val between = this.oreLayer.mBetween;
            val sporadic = this.oreLayer.mSporadic;

            aList.add(EnumChatFormatting.UNDERLINE + "" +
                      EnumChatFormatting.BOLD +
                      "Components" +
                      EnumChatFormatting.UNDERLINE +
                      EnumChatFormatting.BOLD);

            if (primary != null) {
                aList.add(EnumChatFormatting.GOLD + primary.mLocalizedName + EnumChatFormatting.GOLD);
            }

            if (secondary != null) {
                aList.add(EnumChatFormatting.LIGHT_PURPLE + secondary.mLocalizedName + EnumChatFormatting.LIGHT_PURPLE);
            }

            if (between != null) {
                aList.add(EnumChatFormatting.AQUA + between.mLocalizedName + EnumChatFormatting.AQUA);
            }

            if (sporadic != null) {
                aList.add(EnumChatFormatting.GREEN + sporadic.mLocalizedName + EnumChatFormatting.WHITE);
            }
        } else {
            aList.add(EnumChatFormatting.UNDERLINE + "" +
                      EnumChatFormatting.BOLD +
                      "[LSHIFT] for more info" +
                      EnumChatFormatting.UNDERLINE +
                      EnumChatFormatting.BOLD);
        }
    }

    private static short[] blendColors(GT_Worldgen_GT_Ore_Layer oreMix) {
        short count = 0;

        val black = new short[] { 0, 0, 0, 0 };

        var colorA = black;
        if (oreMix.mPrimary != null) {
            colorA = oreMix.mPrimary.mRGBa;
            count++;
        }

        var colorB = black;
        if (oreMix.mSecondary != null) {
            colorB = oreMix.mSecondary.mRGBa;
            count++;
        }

        var colorC = black;
        if (oreMix.mBetween != null) {
            colorC = oreMix.mBetween.mRGBa;
            count++;
        }

        var colorD = black;
        if (oreMix.mSporadic != null) {
            colorD = oreMix.mSporadic.mRGBa;
            count++;
        }

        count = (short) Math.max(1, count);

        val r = (short) ((colorA[0] + colorB[0] + colorC[0] + colorD[0]) / count);
        val g = (short) ((colorA[1] + colorB[1] + colorC[1] + colorD[1]) / count);
        val b = (short) ((colorA[2] + colorB[2] + colorC[2] + colorD[2]) / count);
        val a = (short) ((colorA[3] + colorB[3] + colorC[3] + colorD[3]) / count);

        return new short[] { r, g, b, a };
    }
}
